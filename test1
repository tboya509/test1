resource "aws_cognito_user_pool" "this" {
  name = "testcong"
 
}

resource "aws_cognito_user_pool_client" "this" {
  name         = "testcong"
  user_pool_id = aws_cognito_user_pool.this.id
  generate_secret                      = false
  allowed_oauth_flows                  = ["implicit"]
  allowed_oauth_flows_user_pool_client = true
  allowed_oauth_scopes                 = ["openid"]
  callback_urls                        = ["http://localhost:3000"]
  supported_identity_providers         = ["COGNITO"]
}
resource "aws_cognito_user_pool_domain" "this" {
  domain       = "hell789657865ygjho"
  user_pool_id = aws_cognito_user_pool.this.id
}


variable "users" {
  type = map(object({
    email    = string
    name     = string
    password = string
  }))
  default = {
    user1 = {
      email    = "user1@example.com"
      name     = "User One"
      password = "UserOnePassword123!"
    },
    user2 = {
      email    = "user2@example.com"
      name     = "User Two"
      password = "UserTwoPassword123!"
    },
    # Add all 18 users here...
    user18 = {
      email    = "user18@example.com"
      name     = "User Eighteen"
      password = "UserEighteenPassword123!"
    }
  }
}





resource "aws_cognito_user" "users" {
  for_each    = var.users
  user_pool_id = aws_cognito_user_pool.this.id
  username     = each.key
  attributes = {
    email = each.value.email
    name  = each.value.name
  }
  password = each.value.password
}

variable "groups" {
  type = list(string)
  default = ["Admins", "Users", "Guests"]
}

resource "aws_cognito_user_group" "groups" {
  for_each     = toset(var.groups)
  user_pool_id = aws_cognito_user_pool.this.id
  name         = each.value
}

resource "aws_cognito_user_in_group" "user_groups" {
  for_each     = var.users
  user_pool_id = aws_cognito_user_pool.this.id
  username     = each.key
  group_name   = "Users"  # Assign users to the "Users" group by default
  depends_on = [aws_cognito_user_group.groups]
}

